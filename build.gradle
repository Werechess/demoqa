plugins {
    id 'java'
    id 'io.freefair.lombok' version '6.6.1'
    id 'io.qameta.allure' version '2.11.2'
    id 'org.gradle.test-retry' version '1.5.0'
}

repositories {
    mavenCentral()
}

def allureVersion = '2.20.1'

dependencies {
    testImplementation(
            'com.codeborne:selenide:6.13.0',
            'com.fasterxml.jackson.core:jackson-annotations:2.14.1',
            'com.fasterxml.jackson.core:jackson-databind:2.14.1',
            'com.github.javafaker:javafaker:1.0.2',
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            'io.rest-assured:rest-assured:5.3.0',
            'org.aeonbits.owner:owner:1.0.12',
            'org.assertj:assertj-core:3.24.1',
            'org.junit.jupiter:junit-jupiter:5.9.1',
            'org.junit.platform:junit-platform-engine:1.9.2',
            'org.slf4j:slf4j-simple:2.0.6'
    )
}

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

compileTestJava {
    options.encoding = 'UTF-8'
}

tasks.withType(Test).configureEach {
    systemProperties(System.getProperties())
    useJUnitPlatform() {
        if (System.getProperty("tag") != null && !System.getProperty("tag").isEmpty()) {
            includeTags System.getProperty("tag")
        }
    }

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'             : true,
                'junit.jupiter.execution.parallel.mode.default'        : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default': 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'     : 'custom',
                'junit.jupiter.execution.parallel.config.custom.class' : 'helpers.CustomThreadsStrategy'
        ]
    }

    retry {
        maxRetries = 2
        maxFailures = 10
    }

    testLogging {
        lifecycle {
            events 'started', 'skipped', 'failed', 'standard_error', 'standard_out'
            events 'started', 'skipped', 'failed', 'standard_error', 'standard_out'
            exceptionFormat 'short'
        }
    }
}

tasks.register('apiTest', Test) {
    useJUnitPlatform() {
        includeTags 'api'
    }
}

tasks.register('uiTest', Test) {
    useJUnitPlatform() {
        includeTags 'ui'
    }
}
